// Generated by CoffeeScript 1.10.0
(function() {
  var c, solution, test_data, test_data2;

  c = function() {
    return console.log.apply(console, arguments);
  };

  test_data = "00:01:07,400-234-090\n00:05:01,701-080-080\n00:05:00,400-234-090";

  test_data2 = "00:05:01,701-080-080\n00:05:00,400-234-090\n00:05:01,301-999-999";

  solution = function(s) {
    var arq, arq2, call, cost, counter, get_cost, i, idx, item, j, key, len, len1, parse_number, parse_time, parsed_000, parsed_num, phone_number_str, rayy, ref, remove_highest, time, time_str, total, total_duration, value;
    parse_time = function(time_str) {
      var hours, minutes, rayy, seconds, total_seconds;
      rayy = time_str.split(':');
      hours = parseInt(rayy[0]);
      minutes = parseInt(rayy[1]);
      seconds = parseInt(rayy[2]);
      total_seconds = seconds + (60 * minutes) + (3600 * hours);
      return total_seconds;
    };
    parse_number = function(number_str) {
      var number;
      number = parseInt(number_str.split('-').join(''));
      return number;
    };
    get_cost = function(time) {
      var cost, full, started;
      if (time < 300) {
        cost = time * 3;
        return cost;
      } else {
        started = time % 60 > 0;
        full = Math.floor(time / 60);
        if (started === true) {
          return (full + 1) * 150;
        } else {
          return full * 150;
        }
      }
    };
    total_duration = function(calls) {
      var call, i, len, total;
      total = 0;
      for (i = 0, len = calls.length; i < len; i++) {
        call = calls[i];
        total = total + call.time;
      }
      return total;
    };
    remove_highest = function(arq) {
      var entry, highest, i, key, leader, len, max, ref, total_time, value;
      highest = {
        leaders: [],
        time: 0
      };
      for (key in arq) {
        value = arq[key];
        total_time = total_duration(value.calls);
        if (total_time > highest.time) {
          highest.leaders = [value];
          highest.time = value.time;
        } else if (total_time === highest.time) {
          highest.leaders.push(value);
        }
      }
      if (highest.leaders.length > 1) {
        max = {
          key: null,
          value: 0
        };
        ref = highest.leaders;
        for (i = 0, len = ref.length; i < len; i++) {
          entry = ref[i];
          if (entry.parsed_num > max.value) {
            max.value = entry.parsed_num;
            max.key = entry.key;
          }
        }
        delete arq[max.key];
      } else {
        leader = highest.leaders[0];
        delete arq[leader.key];
      }
      return arq;
    };
    rayy = s.split('\n');
    arq = {};
    for (idx = i = 0, len = rayy.length; i < len; idx = ++i) {
      item = rayy[idx];
      parsed_000 = item.split(',');
      time_str = parsed_000[0];
      phone_number_str = parsed_000[1];
      time = parse_time(time_str);
      cost = get_cost(time);
      parsed_num = parse_number(phone_number_str);
      if (arq[phone_number_str] === void 0) {
        arq[phone_number_str] = {
          key: phone_number_str,
          parsed_num: parsed_num,
          calls: []
        };
      }
      arq[phone_number_str].calls.push({
        time: time,
        cost: cost
      });
    }
    arq2 = remove_highest(arq);
    total = 0;
    for (key in arq2) {
      value = arq2[key];
      ref = value.calls;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        call = ref[j];
        counter = counter + 1;
        total = total + call.cost;
      }
    }
    return total;
  };

  c('solution: ', solution(test_data));

}).call(this);
